modules/security/main.tf

resource "aws_security_group" "my_security_groups" {
  name        = "${var.project_name}-security-group-${count.index}"

  description = "Example security group for your VPC"

  count = length(var.allowed_ports)

  ingress {
    from_port   = var.allowed_ports[count.index]
    to_port     = var.allowed_ports[count.index]
    protocol    = var.allowed_protocols[count.index]
    cidr_blocks = [var.allowed_cidr_blocks[count.index]]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "my_security_groups"
  }
}



modules/security_group/outputs.tf

output "security_group_id" {
  value = aws_security_group.my_security_groups[*].id
}

modules/security_group/variables.tf

variable "project_name" {}

variable "allowed_ports" {
  description = "List of allowed ports"
  type        = list(number)
  default     = [22, 80, 443, 3306, 5432]
}

variable "allowed_protocols" {
  description = "List of allowed protocols"
  type        = list(string)
  default     = ["tcp", "tcp", "tcp", "tcp", "tcp"]
}

variable "allowed_cidr_blocks" {
  description = "List of allowed CIDR blocks"
  type        = list(string)
  default     = ["0.0.0.0/0", "0.0.0.0/0", "0.0.0.0/0", "0.0.0.0/0", "0.0.0.0/0"]
}


modules/vpc/main.tf

module "security_group" {
  source       = "../security_group"
  project_name = var.project_name
}

resource "aws_security_group_rule" "my_security_groups" {
  type               = "ingress"
  from_port          = 80
  to_port            = 80
  protocol           = "tcp"
  security_group_id  = module.security_group.security_group_id[1]  # Adjust the index as needed
  source_security_group_id = module.security_group.security_group_id[1]
}

resource "aws_vpc" "munateach" {
  cidr_block              = var.vpc_cidr
  instance_tenancy        = "default"
  enable_dns_hostnames    = true

  tags = {
    Name = "${var.project_name}-vpc"
  }
}

resource "aws_internet_gateway" "internet_gateway" {
  vpc_id    = aws_vpc.munateach.id

  tags = {
    Name = "${var.project_name}-igw"
  }
}

data "aws_availability_zones" "available_zones" {}

resource "aws_subnet" "public_subnet_az1" {
  vpc_id                  = aws_vpc.munateach.id
  cidr_block              = var.public_subnet_az1_cidr
  availability_zone       = data.aws_availability_zones.available_zones.names[0]
  map_public_ip_on_launch = true

  tags = {
    Name = "public_subnet_az1"
  }
}
# create public subnet az2
resource "aws_subnet" "public_subnet_az2" {
  vpc_id                  = aws_vpc.munateach.id
  cidr_block              = var.public_subnet_az2_cidr
  availability_zone       = data.aws_availability_zones.available_zones.names[1]
  map_public_ip_on_launch = true

  tags      = {
    Name    = "public_subnet_az2"
  }
}

# create route table and add public route
resource "aws_route_table" "public_route_table" {
  vpc_id       = aws_vpc.munateach.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.internet_gateway.id
  }

  tags       = {
    Name     = "public_route_table"
  }
}

# associate public subnet az1 to "public route table"
resource "aws_route_table_association" "public_subnet_az1_route_table_association" {
  subnet_id           = aws_subnet.public_subnet_az1.id
  route_table_id      = aws_route_table.public_route_table.id
}

# associate public subnet az2 to "public route table"
resource "aws_route_table_association" "public_subnet_az2_route_table_association" {
  subnet_id           = aws_subnet.public_subnet_az2.id
  route_table_id      = aws_route_table.public_route_table.id
}

# create private app subnet az1
resource "aws_subnet" "private_app_subnet_az1" {
  vpc_id                   = aws_vpc.munateach.id
  cidr_block               = var.private_app_subnet_az1_cidr
  availability_zone        = data.aws_availability_zones.available_zones.names[0]
  map_public_ip_on_launch  = false

  tags      = {
    Name    = "private_app_subnet_az1"
  }
}

# create private app subnet az2
resource "aws_subnet" "private_app_subnet_az2" {
  vpc_id                   = aws_vpc.munateach.id
  cidr_block               = var.private_app_subnet_az2_cidr
  availability_zone        = data.aws_availability_zones.available_zones.names[1]
  map_public_ip_on_launch  = false

  tags      = {
    Name    = "private_app_subnet_az2"
  }
}

# create private data subnet az1
resource "aws_subnet" "private_data_subnet_az1" {
  vpc_id                   = aws_vpc.munateach.id
  cidr_block               = var.private_data_subnet_az1_cidr
  availability_zone        = data.aws_availability_zones.available_zones.names[0]
  map_public_ip_on_launch  = false

  tags      = {
    Name    = "private_data_subnet_az1"
  }
}

# create private data subnet az2
resource "aws_subnet" "private_data_subnet_az2" {
  vpc_id                   = aws_vpc.munateach.id
  cidr_block               = var.private_data_subnet_az2_cidr
  availability_zone        = data.aws_availability_zones.available_zones.names[1]
  map_public_ip_on_launch  = false

  tags      = {
    Name    = "private_data_subnet_az2"
  }
}


modules/vpc/outputs.tf

output "region" {
    value = var.region
}

output "project_name" {
    value = var.project_name
}

output "munateach_id" {
    value = aws_vpc.munateach.id
}

output "internet_gateway" {
    value = aws_internet_gateway.internet_gateway
}

output "public_subnet_az1_id" {
    value = aws_subnet.public_subnet_az1.id
}

output "public_subnet_az2_cidr_id" {
    value = aws_subnet.public_subnet_az2.id
}

output "private_app_subnet_az1_id" {
    value = aws_subnet.private_app_subnet_az1.id
}

output "private_app_subnet_az2_id" {
    value = aws_subnet.private_app_subnet_az2.id
}

output "private_data_subnet_az1_id" {
    value = aws_subnet.private_data_subnet_az1.id
}

output "private_data_subnet_az2_id" {
    value = aws_subnet.private_data_subnet_az2.id
}


modules/vpc/variables.tf

variable "region" {}
variable "project_name" {}
variable "vpc_cidr" {}
variable "public_subnet_az1_cidr" {}
variable "public_subnet_az2_cidr" {}
variable "private_app_subnet_az1_cidr" {}
variable "private_app_subnet_az2_cidr" {}
variable "private_data_subnet_az1_cidr" {}
variable "private_data_subnet_az2_cidr" {}


muna-project/backend.tf

terraform {
  backend "s3" {
    bucket  = "agunigbo-terraform-remote-state"
    key     = "aguoko.tfstate"
    region  = "eu-west-2"
    profile = "munachi"
  }
}

muna-project/main.tf

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "5.21.0"
    }
  }
}

provider "aws" {
  region  = var.region
  profile = "munachi"
}

module "Munateach_Edinburgh" {
  source                  = "../modules/vpc/"
  region                  = var.region
  project_name            = var.project_name
  vpc_cidr                = var.vpc_cidr
  public_subnet_az1_cidr  = var.public_subnet_az1_cidr
  public_subnet_az2_cidr  = var.public_subnet_az2_cidr
  private_app_subnet_az1_cidr = var.private_app_subnet_az1_cidr
  private_app_subnet_az2_cidr = var.private_app_subnet_az2_cidr
  private_data_subnet_az1_cidr = var.private_data_subnet_az1_cidr
  private_data_subnet_az2_cidr = var.private_data_subnet_az2_cidr
}


muna-project/terraform.tfvars

region                          = "eu-west-2"
project_name                    = "Munateach_Edinburgh-server"
vpc_cidr                        = "10.0.0.0/16"
public_subnet_az1_cidr          = "10.0.0.0/24"
public_subnet_az2_cidr          = "10.0.1.0/24"
private_app_subnet_az1_cidr     = "10.0.2.0/24"
private_app_subnet_az2_cidr     = "10.0.3.0/24"
private_data_subnet_az1_cidr    = "10.0.4.0/24"
private_data_subnet_az2_cidr    = "10.0.5.0/24"


muna-project/variables.tf

variable "region" {}
variable "project_name" {}
variable "vpc_cidr" {}
variable "public_subnet_az1_cidr" {}
variable "public_subnet_az2_cidr" {}
variable "private_app_subnet_az1_cidr" {}
variable "private_app_subnet_az2_cidr" {}
variable "private_data_subnet_az1_cidr" {}
variable "private_data_subnet_az2_cidr" {}



